name: Build & Lint & Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_lint_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Setup Python 3
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./requirements.txt

      - name: Check that code is formatted with Black (1/2)
        uses: lgeiger/black-action@master
        with:
          args: ./BasementRenovator.py --check

      - name: Check that code is formatted with Black (2/2)
        uses: lgeiger/black-action@master
        with:
          args: ./src/*.py --check


      #- name: Run PyLint
      #  run: ./lint.sh

  discord:
    name: Discord Failure Notification
    needs: [build_lint_deploy]
    # "always()" is needed to always run this job, even if the other jobs fail
    # We don't want to spam the Discord channel when people have failing pull requests
    if: always() && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      # The "workflow-conclusion-action" creates a "WORKFLOW_CONCLUSION" environment variable
      - uses: technote-space/workflow-conclusion-action@v2
      - if: env.WORKFLOW_CONCLUSION != 'success' && env.WORKFLOW_CONCLUSION != 'cancelled'
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ env.WORKFLOW_CONCLUSION }}
          title: ""
          
  pyinstaller_trigger:
    name: Trigger a Windows build
    needs: [build_lint_deploy]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
        - uses: peter-evans/repository-dispatch@v1
          with:
            token: ${{ secrets.REPO_ACCESS_TOKEN }}
            repository: jerbmega/Basement-Renovator
            event-type: build-release
            client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'
